
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Canary Deployment Demo - Edge-based routing with Cognito auth'

Parameters:
  ProjectName:
    Type: String
    Default: canary-demo-v2
    Description: Name of the project

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  # Cognito User Pool

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${Environment}-users
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: orgId
          AttributeDataType: String
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  # Cognito User Pool Client

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ProjectName}-${Environment}-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000/
        - https://localhost:3000/
      LogoutURLs:
        - http://localhost:3000/
        - https://localhost:3000/

  # S3 Bucket for Stable Build
  StableBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${Environment}-stable
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']

  # S3 Bucket for Next Build
  NextBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${Environment}-next
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']

  # Bucket Policy for Stable Build
  StableBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StableBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${StableBucket}/*'

  # Bucket Policy for Next Build
  NextBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NextBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${NextBucket}/*'

  # IAM Role for Lambda@Edge
  CanaryRoutingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda@Edge Function for Canary Routing
  CanaryRoutingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-canary-routing
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt CanaryRoutingLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = async (event) => {
            const request = event.Records[0].cf.request;
            const headers = request.headers;
            
            // Default to stable build
            let targetBuild = 'stable';
            let orgId = null;
            
            // Extract orgId from cookies
            if (headers.cookie && headers.cookie.length > 0) {
              const cookieString = headers.cookie[0].value;
              const cookieMatch = cookieString.match(/orgId=([^;]+)/);
              if (cookieMatch && cookieMatch[1]) {
                orgId = cookieMatch[1];
              }
            }
            
            // List of organizations in the canary rollout
            const rolloutOrgs = [
              'ORG_ABC',
              'ORG_TEST', 
              'ORG_CANARY',
              'ORG_BETA'
            ];
            
            // Route to next build if org is in rollout list
            if (orgId && rolloutOrgs.includes(orgId)) {
              targetBuild = 'next';
            }
            
            // Route to the appropriate S3 bucket based on build decision
            if (targetBuild === 'next') {
              // Route to the next build S3 bucket
              request.origin = {
                s3: {
                  domainName: '${NextBucket.DomainName}',
                  region: 'us-east-1',
                  authMethod: 'none',
                  path: '',
                  customHeaders: {}
                }
              };
            } else {
              // Route to the stable build S3 bucket  
              request.origin = {
                s3: {
                  domainName: '${StableBucket.DomainName}',
                  region: 'us-east-1',
                  authMethod: 'none',
                  path: '',
                  customHeaders: {}
                }
              };
            }
            
            // Ensure we have proper URI for S3
            if (request.uri === '/') {
              request.uri = '/index.html';
            }
            
            // Add debug headers (Lambda@Edge format)
            request.headers['x-canary-build'] = [{ key: 'x-canary-build', value: targetBuild }];
            request.headers['x-canary-org'] = [{ key: 'x-canary-org', value: orgId || 'unknown' }];
            
            return request;
          };
      Description: Lambda@Edge function for canary deployment routing
      Timeout: 5

  # Lambda Version for Canary Routing Function
  CanaryRoutingFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref CanaryRoutingFunction
      Description: !Sub 'Version for Lambda@Edge deployment - ${AWS::StackName}-${AWS::Region}'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${ProjectName}-${Environment} Canary Distribution
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: stable-origin
            DomainName: !GetAtt StableBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: next-origin
            DomainName: !GetAtt NextBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: stable-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Headers:
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
            Cookies:
              Forward: all
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref CanaryRoutingFunctionVersion
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${ProjectName}-${Environment}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${ProjectName}-${Environment}-UserPoolClientId

  StableBucketName:
    Description: S3 Bucket for Stable Build
    Value: !Ref StableBucket
    Export:
      Name: !Sub ${ProjectName}-${Environment}-StableBucket

  NextBucketName:
    Description: S3 Bucket for Next Build
    Value: !Ref NextBucket
    Export:
      Name: !Sub ${ProjectName}-${Environment}-NextBucket

  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CloudFrontURL

  CanaryFunctionARN:
    Description: Lambda@Edge Function ARN for Canary Routing
    Value: !Ref CanaryRoutingFunctionVersion
    Export:
      Name: !Sub ${ProjectName}-${Environment}-CanaryFunctionARN

